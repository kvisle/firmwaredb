#!/usr/bin/perl

use warnings;
use strict;

use Data::Dumper;
use Getopt::Long;

my $opt_unknowns;

sub usage {
  print "Copyright (c) 2014 Trygve Vea <trygve.vea\@gmail.com>\n\n";

  print "This plugin checks installed firmware versions on the server, and \n";
  print "tests them against the firmware directory included in the project.\n\n";

  print "Usage:\n";
  print " check_firmware\n\n";

  print "Options:\n";
  print " -U, --unknowns\n";
  print "    Throw a warning if tests found a device with an unknown\n";
  print "    identifier\n";
  print " -h, --help\n";
  print "    Print detailed help screen\n";
  print " -V, --version\n";
  print "    Print version information\n";
  print "\n\n";
  exit;
}

sub version {
  print "check_firmware v0.1\n";
  exit;
}

sub read_file {
  my $filename = shift;

  open (FILE, '<', $filename)
    or die("BUG: Unable to open $filename for reading\n");

  local $/;
  return <FILE>;
}

# Borrowed from: http://stackoverflow.com/a/3068793/431493
sub csvsplit {
  my $line = shift;
  my $sep = (shift or ',');

  return () unless $line;

  my @cells;
  $line =~ s/\r?\n$//;

  my $re = qr/(?:^|$sep)(?:"([^"]*)"|([^$sep]*))/;

  while($line =~ /$re/g) {
    my $value = defined $1 ? $1 : $2;
    push @cells, (defined $value ? $value : '');
  }

  return @cells;
}

sub read_modules {
  my $ret = {};

  open FILE, '/proc/modules';
  while (<FILE>) {
    my @line = split(/ /);
    $ret->{$line[0]} = 1;
  }
  close FILE;
  return $ret;
}

sub read_fwdb {
  my $ret = {
    'fw' => {
      'BIOS' => {},
      'Controller' => {}
    },
    'id' => {}
  };
  open FILE, '/var/lib/nagios/firmwaredb.csv';
  while (<FILE>) {
    my @line = csvsplit($_);

    if ( ! defined($ret->{fw}->{$line[0]}->{$line[3]}) ) {
      $ret->{fw}->{$line[0]}->{$line[3]} = [];
    }
    push @{$ret->{fw}->{$line[0]}->{$line[3]}}, { 'Vendor' => $line[1],
                                                  'Model' => $line[2],
                                                  'Version' => $line[4],
                                                  'Severity' => $line[5],
                                                  'SeverityString' => $line[6] };
  }
  close FILE;
  open FILE, '/var/lib/nagios/firmwaredbid.csv';
  while (<FILE>) {
    my @line = csvsplit($_);

    if ( ! defined($ret->{id}->{$line[0]}) ) {
      $ret->{id}->{$line[0]} = {};
    }
    $ret->{id}->{$line[0]}->{$line[1]} = $line[2];
  }
  close FILE;

  return $ret;
}

sub enum_hpacucli {
  my @items;
  open(ACU, "/usr/sbin/hpacucli ctrl all show config detail|")
    or die('Failed to execute hpacucli');

  my $item;

  while(<ACU>)
  {
    if ( /^Smart Array (.*) in Slot (\d+)/ )
    {
      if ( $item ) { push @items, $item; }
      $item = {
        'type'   => 'controller',
        'name'   => "Smart Array $1",
        'fields' => {}
      };
    }
    if ( /^   ([a-zA-Z0-9].*): (.*)$/ )
    {
      $item->{fields}->{$1} = $2;
      chomp($item->{fields}->{$1});
      if ( $1 eq 'Firmware Version' or $1 eq 'Firmware Revision' ) {
        $item->{version} = $2;
      }
    }
    
    if ( /^      physicaldrive (.*)$/ )
    {
      if ( $item ) { push @items, $item; }
      $item = {
        'type'   => 'drive',
        'slot'   => $1,
        'fields' => {}
      };
    }
    if ( /^         ([a-zA-Z0-9].*): (.*)$/ )
    {
      $item->{fields}->{$1} = $2;
      chomp($item->{fields}->{$1});
    }
  }
  if ( $item ) { push @items, $item; }

  return @items;
}

my $fwdb = read_fwdb();
my $modules = read_modules();

sub search_newest_fw {
  my $type       = shift;
  my $identifier = shift;
  my $version    = shift;

  my $matched;

  my $newer = {
    'Severity' => -1
  };

  foreach(@{$fwdb->{fw}->{$type}->{$identifier}}) {
    if ( $matched ) {
      if ( $newer->{Severity} < $_->{Severity} ) {
        $newer->{Severity} = $_->{Severity};
        $newer->{SeverityString} = $_->{SeverityString};
      }

      $newer->{Version} = $_->{Version};
    }

    if ( $_->{Version} eq $version ) {
      $newer->{Severity} = 0;
      $matched = 1;
    }
  }

  return $newer;
}

# The special case about HP, is that the version-field is the identifier, and
# the date-field is the version.
sub test_bios_hp {
  my $bios = shift;

  if ( ! defined $fwdb->{fw}->{BIOS}->{$bios->{version}} ) {
    return {
      'Severity' => -1,
      'String'   => "Unknown BIOS identifier $bios->{version} for vendor $bios->{vendor}"
    }
  }

  my $newer = search_newest_fw('BIOS', $bios->{version}, $bios->{date});

  return {
    'Severity' => -1,
    'String'   => "Unknown BIOS version $bios->{date} for identifier $bios->{version} for vendor $bios->{vendor}\n"
  } unless $newer->{Severity} > -1;

  return {
    'Severity' => 0,
    'String'   => "BIOS version $bios->{date} for identifier $bios->{version} is the newest we know.\n"
  } unless $newer->{Severity} > 0;

  $newer->{String} = "BIOS update exist (Vendor grade: $newer->{SeverityString}), newest version is: '$bios->{version} $newer->{Version}'.";

  return $newer;
}

sub test_bios {
  my $bios = { };
  if ( -e '/sys/devices/virtual/dmi/id/bios_vendor' ) {
    $bios->{vendor}  = read_file('/sys/devices/virtual/dmi/id/bios_vendor');
    $bios->{date}    = read_file('/sys/devices/virtual/dmi/id/bios_date');
    $bios->{version} = read_file('/sys/devices/virtual/dmi/id/bios_version');
  }
  else {
    $bios->{vendor}  = `dmidecode -s bios-vendor`;
    $bios->{date}    = `dmidecode -s bios-release-date`;
    $bios->{version} = `dmidecode -s bios-version`;
  }
  chomp $bios->{vendor};
  chomp $bios->{date};
  chomp $bios->{version};

  if ( $bios->{vendor} eq 'HP' ) { return test_bios_hp($bios); }

  return {
    'Severity' => -1,
    'String' => "Unknown BIOS vendor $bios->{vendor}"
  };
}


sub test_hpacucli {
  my @results;
  foreach(enum_hpacucli()) {
    if ( $_->{type} eq 'controller' ) {
      if ( ! defined $fwdb->{id}->{Controller}->{$_->{name}} ) {
        push @results, {
          'Severity' => -1,
          'String' => "Unknown Controller $_->{name}"
        };
      }
      else {
#        print Dumper($_);
        my $res = search_newest_fw('Controller', $fwdb->{id}->{Controller}->{$_->{name}}, $_->{version});
        if ( $res->{Severity} > 0 ) {
          $res->{String} = "Controller update exist for $_->{name} (Vendor grade: $res->{SeverityString}), newest version is: '$res->{Version}'.";
        } elsif ( $res->{Severity} == -1 ) {
          $res->{String} = "Unknown Controller firmware version $_->{version} for $_->{name}\n";
        } else {
          $res->{String} = "Controller firmware version $_->{version} for $_->{name} is the newest we know\n";
        }
        push @results, $res;
      }
    }
  }
  return @results;
}

sub test_controller {
  my @results;
  if ( $modules->{cciss} or
       $modules->{hpsa} ) {
    foreach(test_hpacucli()) {
      push @results, $_;
    }
  }
  return @results;
}

sub run_tests {
  my @results;
  my $ret = 0;
  push @results, test_bios();
  foreach(test_controller()) {
    push @results, $_;
  }

  my @out = reverse sort {
    $a->{Severity} <=> $b->{Severity}
  } @results;

  my $statusstring = {
    -1 => 'Unknown',
    0 => 'OK',
    1 => 'OK',
    2 => 'Warning',
    3 => 'Critical'
  };
  my $exitcode = {
    -1 => 0,
    0 => 0,
    1 => 0,
    2 => 1,
    3 => 2
  };
  my $status = {
  };

  foreach(@out) {
    if ( ! defined $status->{$statusstring->{$_->{Severity}}} ) {
      $status->{$statusstring->{$_->{Severity}}} = 1;
      print $statusstring->{$_->{Severity}}.":";
    }
    $ret = $exitcode->{$_->{Severity}} unless ( $ret > $exitcode->{$_->{Severity}} );
    print " $_->{String} ";
  }
  print "\n";
  return $ret;
}


my $opt_usage;
my $opt_version;

GetOptions ("help|h" => \$opt_usage,
            "version|V" => \$opt_version,
            "unknowns|U" => \$opt_unknowns)
or usage();

if ( $opt_usage ) { usage(); }
if ( $opt_version ) { version(); }

exit run_tests();
